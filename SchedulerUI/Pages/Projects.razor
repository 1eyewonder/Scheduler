@page "/projects"

@inject IProjectsViewModel ProjectsViewModel
@inject IEditProjectViewModel EditProjectViewModel
@inject IMatToaster Toaster

@attribute [Authorize(Roles = "1,2")]

<style>
    .mdc-table {
        width: 100%;
    }

    .mdc-table th, .mdc-table td {
        text-align: center;
        width: auto;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .mdc-dialog .mdc-dialog__surface {
        max-width: none;
        width: auto;
        padding: 5% 15%;
    }

    .row {
        margin: 10px 0;
    }

    .mdc-select {
        width: 100%;
    }

    .mdc-text-field{
        width:100%;
    }

    .mdc-dialog__title{
        text-align:center;
    }
</style>

<MatH2>Projects</MatH2>

@if (ProjectsViewModel.ErrorMessage != null)
{
    <div class="alert alert-danger" role="alert">
        <MatBody2>@ProjectsViewModel.ErrorMessage</MatBody2>
    </div>
}

<div class="row">
    <MatButton Outlined="true" OnClick="EditProjectViewModel.OpenNewDialog">Add Project</MatButton>
    <MatButton Outlined="true" OnClick="ProjectsViewModel.Refresh">Refresh</MatButton>
</div>

@if (ProjectsViewModel.IsRunning == true)
{
    <p><em>Loading...</em></p>
}
else
{
    <MatTable Items="ProjectsViewModel.ProjectList" Striped="true" PageSize="10" ShowPaging="false">
        <MatTableHeader>
            <th>Name</th>
            <th>Number</th>
            <th>Customer</th>
            <th>Edit Project</th>
            <AuthorizeView Roles="2">
                <Authorized>
                    <th>Delete Project</th>
                </Authorized>
            </AuthorizeView>
        </MatTableHeader>

        <MatTableRow>
            @{var project = context;}
            <td>@project.Name</td>
            <td>@project.Number</td>
            <td>@project.Customer.Name</td>
            <td>
                <MatButton OnClick="()=>EditProjectViewModel.OpenEditDialog(project)">Edit</MatButton>
            </td>
            <td>
                <MatButton OnClick="()=>ProjectsViewModel.OpenDeleteDialog(project.Id)">Delete</MatButton>
            </td>
        </MatTableRow>

    </MatTable>

    <Pagination TotaPagesQuantity="ProjectsViewModel.TotalPageQuantity" CurrentPage="ProjectsViewModel.CurrentPage" Radius="2"
                SelectedPage="ProjectsViewModel.SelectedPage"></Pagination>

    #region NewProjectModal
    <MatDialog @bind-IsOpen="EditProjectViewModel.NewDialogIsOpen">
        <MatDialogTitle>New Project</MatDialogTitle>
        <MatDialogContent>
            <EditForm Model="@EditProjectViewModel.ProjectDto">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="row">
                    <MatTextField Outlined="true" @bind-Value="EditProjectViewModel.ProjectDto.Name" Label="Project Name" ValidationDisabled="true"></MatTextField>
                </div>

                <div class="row">
                    <MatTextField Outlined="true" @bind-Value="EditProjectViewModel.ProjectDto.Number" Label="Project Number" ValidationDisabled="true"></MatTextField>
                </div>

                <div class="row">
                    <MatSelect Class="in-modal" Label="Select a Customer" @bind-Value="EditProjectViewModel.ProjectDto.CustomerId" ValidationDisabled="true">
                        @{
                                var uniqueCustomers = EditProjectViewModel.Customers.Select(n => new { n.Name, n.Id }).Distinct().ToList();
                                foreach (var customer in uniqueCustomers)
                                {
                                <MatOption TValue="int?" Value="@customer.Id">@customer.Name</MatOption>
                                }
                        }
                    </MatSelect>
                </div>

                <div class="row">
                    <MatButton Type="Primary" OnClick="AddProject">Save Changes</MatButton>
                    <MatButton @onclick="@EditProjectViewModel.Cancel"> Cancel</MatButton>
                </div>
            </EditForm>
        </MatDialogContent>
    </MatDialog>
    #endregion

    #region EditProjectModal
    <MatDialog @bind-IsOpen="EditProjectViewModel.EditDialogIsOpen">
        <MatDialogTitle>Edit Project</MatDialogTitle>
        <MatDialogContent>
            <EditForm Model="@EditProjectViewModel.ProjectDto" OnValidSubmit="@EditProjectViewModel.SaveChanges">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="row">
                    <MatTextField Outlined="true" @bind-Value="EditProjectViewModel.ProjectDto.Name" Label="Project Name" ValidationDisabled="true" FullWidth="true"></MatTextField>
                </div>

                <div class="row">
                    <MatTextField Outlined="true" @bind-Value="EditProjectViewModel.ProjectDto.Number" Label="Project Number" ValidationDisabled="true" FullWidth="true"></MatTextField>
                </div>

                <div class="row">
                    <MatSelect Class="in-modal" Label="Select a Customer" @bind-Value="EditProjectViewModel.ProjectDto.CustomerId" ValidationDisabled="true">
                        @{
                                var uniqueCustomers = EditProjectViewModel.Customers.Select(n => new { n.Name, n.Id }).Distinct().ToList();
                                foreach (var customer in uniqueCustomers)
                                {
                                <MatOption TValue="int?" Value="@customer.Id">@customer.Name</MatOption>
                                }
                        }
                    </MatSelect>
                </div>
 
                <div class="row">
                    <MatButton Type="Primary">Save Changes</MatButton>
                    <MatButton @onclick="@EditProjectViewModel.Cancel"> Cancel</MatButton>
                </div>
            </EditForm>
        </MatDialogContent>
    </MatDialog>
    #endregion

    #region DeleteProjectModal
    <MatDialog @bind-IsOpen="ProjectsViewModel.DeleteDialogIsOpen">
        <MatDialogTitle>Confirm Delete</MatDialogTitle>
        <MatBody2>Are you sure you would like to delete this project?</MatBody2>
        <MatButton OnClick="ProjectsViewModel.DeleteEntity">Confirm</MatButton>
        <MatButton OnClick="ProjectsViewModel.CancelDelete">Cancel</MatButton>
    </MatDialog>
    #endregion
}

@code {

    protected override async Task OnInitializedAsync()
    {
        await ProjectsViewModel.Initialization;
        await EditProjectViewModel.Initialization;
    }

    private async Task AddProject()
    {
        // Attempts to add project to database
        bool success = await EditProjectViewModel.SaveNewEntity();

        // Displays toast notification if successful
        if (success == true)
        {
            Toaster.Add("New project added successfully", MatToastType.Success, "Add Project");
        }
    }
}
