@page "/login"

@using SchedulerUI.Services.Interfaces
@using SchedulerAPI.Dtos

@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Spinner

@inject IUserService userService
@inject NavigationManager NavigationManager

<h1>Log In</h1>

@if (ErrorMessage != null)
{
    <div class="alert alert-danger" role="alert">
        <p>@ErrorMessage</p>
    </div>
}
<div class="card">
    <div class="card-body">

        <h5 class="card-title">Please log in using your account information</h5>

            <EditForm Model="userLogin" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                        <SfTextBox Placeholder="Username" FloatLabelType="@FloatLabelType.Auto" Id="username" @bind-Value="userLogin.Name"></SfTextBox>
                    </div>
                    <ValidationMessage For="@(() => userLogin.Name)" />
                </div>
                <div class="form-group">
                    <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                        <SfTextBox Placeholder="Password" FloatLabelType="@FloatLabelType.Auto" Id="password" @bind-Value="userLogin.Password" Type="InputType.Password"></SfTextBox>
                    </div>
                    <ValidationMessage For="@(() => userLogin.Password)" />
                </div>
                <div class="col-xs-12 col-sm-12 col-lg-6 col-md-6">
                    <SfButton IsPrimary="true" Disabled="IsRunning">Login</SfButton>
                </div>
            </EditForm>
    </div>
</div>

@code {

    private UserLoginDto userLogin;
    private string ErrorMessage;
    private bool IsRunning;

    protected override Task OnInitializedAsync()
    {
        userLogin = new UserLoginDto()
        {
            Name = "admin",
            Password = "password"
        };

        IsRunning = false;
        ErrorMessage = null;
        userService.LogOut();

        return base.OnInitializedAsync();
    }

    private async Task HandleLogin()
    {
        // Removes error messages and disables additional button presses
        IsRunning = true;
        ErrorMessage = null;

        try
        {
            var result = await userService.Login(userLogin);

            if (result.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                ErrorMessage = result.ReasonPhrase;
            }
        }

        // Catches issues such as not being able to connect to server
        catch (Exception e)
        {
            ErrorMessage = e.ToString();
        }

        // Enables button to be pressed again if needed
        IsRunning = false;
    }
}