@page "/jobs"

@using SchedulerAPI.Models
@using Syncfusion.Blazor.Buttons
@using SchedulerUI.Components

@inject IUserService UserService
@inject IJobService JobService
@inject NavigationManager NavigationManager
@inject IModalService Modal 

@attribute [Authorize]

<h1>Jobs</h1>

<div class="row">
    <SfButton IsPrimary="true" CssClass="e-small">Add Job</SfButton>
    <SfButton IsPrimary="true" CssClass="e-small" OnClick="Refresh">Refresh</SfButton>
</div>

@if (JobList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th>Quote Number</th>
                <th>Quote Revision</th>
                <th>Job Number</th>
                <th>Job Revision</th>
                <th>Is A Job</th>
                <AuthorizeView Roles="1,2">
                    <Authorized>
                        <th>Edit Job</th>
                    </Authorized>
                </AuthorizeView>
                <AuthorizeView Roles="2">
                    <Authorized>
                        <th>Delete Job</th>
                    </Authorized>
                </AuthorizeView>
            </tr>
        </thead>
        <tbody>
            @foreach (var job in JobList)
            {
            <tr>
                <td>@job.QuoteNumber</td>
          
                @if (job.JobRevisions.Count > 0)
                {
                    <td>@job.QuoteRevisions.FirstOrDefault().RevisionNumber</td>
                }
                else
                {
                    <td>...</td>
                }

                @if (job.JobNumber != null)
                {
                    <td>@job.JobNumber</td>
                }
                else
                {
                    <td>...</td>
                }

                @if (job.JobRevisions.Count > 0)
                {
                    <td>@job.JobRevisions.FirstOrDefault().RevisionNumber</td>
                }
                else
                {
                    <td>...</td>
                }
                <td>@job.IsAJob</td>
                <td>
                    <SfButton CssClass="e-small" OnClick="@(() => ShowEditJob(job.Id))">Edit</SfButton>
                </td>
                <td>
                    <SfButton CssClass="e-small">Delete</SfButton>
                </td>
            </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<Job> JobList;
    private int jobRevision;

    protected override async Task OnInitializedAsync()
    {
        JobList = await JobService.GetJobs();

        var test = JobList.First().JobRevisions;
    }

    private async Task Refresh()
    {
        JobList = await JobService.GetJobs();
    }

    private async Task ShowEditJob(int jobId)
    {

        var parameters = new ModalParameters();
        parameters.Add(nameof(EditJob.Id), jobId);

        var options = new ModalOptions()
        {
            HideCloseButton = false,
            DisableBackgroundCancel = true
        };

        var modalForm = Modal.Show<EditJob>("Edit Job", parameters, options);
        var result = await modalForm.Result;

        if (result.Cancelled)
        {

        }
        else
        {
            await Refresh();
        }
    }
}