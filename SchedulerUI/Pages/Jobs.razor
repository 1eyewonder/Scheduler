@page "/jobs"

@using SchedulerAPI.Models
@using Syncfusion.Blazor.Buttons
@using SchedulerUI.Components

@inject IUserService UserService
@inject IJobService JobService
@inject NavigationManager NavigationManager
@inject IModalService Modal

@attribute [Authorize]

<h1>Jobs</h1>

<div class="row">
    <SfButton IsPrimary="true" CssClass="e-small">Add Job</SfButton>
    <SfButton IsPrimary="true" CssClass="e-small">Refresh</SfButton>
</div>

@if (JobList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th>Quote Number</th>
                <th>Job Number</th>
                <th>Project Number</th>
                <th>Is A Job</th>
                <AuthorizeView Roles="1,2">
                    <th>Edit Job</th>
                </AuthorizeView>
                <AuthorizeView Roles="2">
                    <th>Delete Job</th>
                </AuthorizeView>
            </tr>
        </thead>
        <tbody>
            @foreach (var job in JobList)
            {
                <tr>
                    <td>@job.QuoteNumber</td>
                    <td>@job.JobNumber</td>
                    <td>@job.ProjectNumber</td>
                    <td>@job.IsAJob</td>
                    <td>
                        <SfButton CssClass="e-small" OnClick="@(() => Modal.Show<EditJob>("Edit Job"))">Edit</SfButton>
                    </td>
                    <td>
                        <SfButton CssClass="e-small">Delete</SfButton>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }
    private List<Job> JobList;

    protected override async Task OnInitializedAsync()
    {
        JobList = await JobService.GetJobs();
    }
}