@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons

@inject IJobService JobService
@inject IMapper Mapper
@inject IModalService Modal 

    <div class="simple-form">
        @if (ShowErrors == true)
        {
            <p>@Errors</p>
        }

        <EditForm Model="JobDto" OnValidSubmit="SubmitJobEdits">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <SfTextBox Placeholder="Quote Number" FloatLabelType="@FloatLabelType.Auto" Id="quoteNumber" @bind-Value="JobDto.QuoteNumber"></SfTextBox>
                <SfTextBox Placeholder="Job Number" FloatLabelType="@FloatLabelType.Auto" Id="jobNumber" @bind-Value="JobDto.JobNumber"></SfTextBox>
                <SfTextBox Placeholder="Project Number" FloatLabelType="@FloatLabelType.Auto" Id="projectNumber" @bind-Value="JobDto.ProjectNumber"></SfTextBox>

            </div>
            <SfButton IsPrimary="true">Save Changes</SfButton>
        </EditForm>

        <SfButton @onclick="Cancel" class="btn btn-secondary">Cancel</SfButton>

    </div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    JobDto JobDto { get; set; }
    Job Job { get; set; }
    private string Errors;
    private bool ShowErrors;

    #region Parameters
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public string QuoteNumber { get; set; }

    [Parameter]
    public string JobNumber { get; set; }

    [Parameter]
    public string ProjectNumber { get; set; }
    #endregion

    protected override async Task OnInitializedAsync()
    {
        //Intializes objects
        Job = new Job();
        JobDto = new JobDto();
        ShowErrors = false;
        Errors = "";
        Job = await JobService.GetJob(Id);

        //Maps properties
        Mapper.Map(Job, JobDto);
    }

    async void SubmitJobEdits()
    {
        ShowErrors = false;
        Errors = "";
        var response = await JobService.UpdateJob(JobDto);


        if (response.IsSuccessStatusCode)
        {
            await BlazoredModal.Close(ModalResult.Ok($"Job was successfully updated."));
        }
        else
        {
            ShowErrors = true;
            Errors = response.ReasonPhrase;
        }

    }

    async void Cancel()
    {
        await BlazoredModal.Cancel();
    }

}